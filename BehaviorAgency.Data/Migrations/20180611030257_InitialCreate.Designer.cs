// <auto-generated />
using System;
using BehaviorAgency.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BehaviorAgency.Data.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20180611030257_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BehaviorAgency.Data.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.Agency", b =>
                {
                    b.Property<int>("AgencyId");

                    b.Property<int?>("AddressId");

                    b.Property<byte[]>("AgencyLogo")
                        .HasColumnType("image");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DropBoxClientId")
                        .IsUnicode(false);

                    b.Property<string>("DropBoxClientSecret")
                        .IsUnicode(false);

                    b.Property<string>("GoogleClientId")
                        .IsUnicode(false);

                    b.Property<string>("GoogleClientSecret")
                        .IsUnicode(false);

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AgencyId");

                    b.HasIndex("AddressId");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.AgencyUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("AgencyId", "UserId")
                        .IsUnique()
                        .HasName("IX_AgencyUsers");

                    b.ToTable("AgencyUsers");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdministeredLanguage")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("AnalystId");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("HoursApproved");

                    b.Property<string>("Insurer")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MedicaidNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RbtId");

                    b.Property<string>("SecondInsurer")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SecondaryPolicyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("StatusId");

                    b.HasKey("CaseId");

                    b.HasIndex("AnalystId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RbtId");

                    b.HasIndex("StatusId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.CaseStatus", b =>
                {
                    b.Property<int>("StatusId");

                    b.Property<string>("Status")
                        .HasMaxLength(10);

                    b.HasKey("StatusId");

                    b.ToTable("CaseStatus");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.CustomerInfo", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Multilingual");

                    b.Property<string>("NaturalLanguage")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CustomerId");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerInfo");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.Document", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyId");

                    b.Property<int?>("ApprovedBy");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DocCategoryId");

                    b.Property<string>("DocFormat")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DocPath")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("DocTypeId");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("RejectedBy");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReviewedBy");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId");

                    b.HasKey("DocId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("DocCategoryId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("RejectedBy");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.DocumentCategory", b =>
                {
                    b.Property<int>("DocCategoryId");

                    b.Property<string>("DocCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("DocCategoryId");

                    b.HasIndex("DocCategoryId")
                        .IsUnique()
                        .HasName("IX_DocCategory");

                    b.ToTable("DocumentCategory");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.DocumentType", b =>
                {
                    b.Property<int>("DocTypeId");

                    b.Property<int?>("AgencyId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DocCategoryId");

                    b.Property<string>("DocTypeDesc")
                        .HasColumnType("text");

                    b.Property<string>("DocTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("DocTypeId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("DocCategoryId");

                    b.HasIndex("DocTypeId")
                        .IsUnique()
                        .HasName("IX_DocumentType");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.UserInfo", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<string>("AspNetUserId")
                        .HasMaxLength(450);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("AddressId");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.UserSettings", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("NotifyDocExpiration");

                    b.Property<bool?>("SendReminders");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.Agency", b =>
                {
                    b.HasOne("BehaviorAgency.Data.Entities.Address", "Address")
                        .WithMany("Agency")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Agency_Address");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.AgencyUsers", b =>
                {
                    b.HasOne("BehaviorAgency.Data.Entities.Agency", "Agency")
                        .WithMany("AgencyUsers")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_AgencyUsers_Agency");

                    b.HasOne("BehaviorAgency.Data.Entities.UserInfo", "User")
                        .WithMany("AgencyUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AgencyUsers_UserInfo");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.Case", b =>
                {
                    b.HasOne("BehaviorAgency.Data.Entities.UserInfo", "Analyst")
                        .WithMany("CaseAnalyst")
                        .HasForeignKey("AnalystId")
                        .HasConstraintName("FK_Case_UserInfo1");

                    b.HasOne("BehaviorAgency.Data.Entities.CustomerInfo", "Customer")
                        .WithMany("Case")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Case_CustomerInfo");

                    b.HasOne("BehaviorAgency.Data.Entities.UserInfo", "Rbt")
                        .WithMany("CaseRbt")
                        .HasForeignKey("RbtId")
                        .HasConstraintName("FK_Case_UserInfo");

                    b.HasOne("BehaviorAgency.Data.Entities.CaseStatus", "Status")
                        .WithMany("Case")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Case_CaseStatus");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.CustomerInfo", b =>
                {
                    b.HasOne("BehaviorAgency.Data.Entities.Address", "Address")
                        .WithMany("CustomerInfo")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_CustomerInfo_Address");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.Document", b =>
                {
                    b.HasOne("BehaviorAgency.Data.Entities.Agency", "Agency")
                        .WithMany("Document")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_Document_Agency");

                    b.HasOne("BehaviorAgency.Data.Entities.UserInfo", "ApprovedByNavigation")
                        .WithMany("DocumentApprovedByNavigation")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK_Document_ApprovedByUser");

                    b.HasOne("BehaviorAgency.Data.Entities.DocumentCategory", "DocCategory")
                        .WithMany("Document")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("FK_Document_DocumentCategory");

                    b.HasOne("BehaviorAgency.Data.Entities.DocumentType", "DocType")
                        .WithMany("Document")
                        .HasForeignKey("DocTypeId")
                        .HasConstraintName("FK_Document_DocumentType");

                    b.HasOne("BehaviorAgency.Data.Entities.UserInfo", "RejectedByNavigation")
                        .WithMany("DocumentRejectedByNavigation")
                        .HasForeignKey("RejectedBy")
                        .HasConstraintName("FK_Document_RejectedByUser");

                    b.HasOne("BehaviorAgency.Data.Entities.UserInfo", "ReviewedByNavigation")
                        .WithMany("DocumentReviewedByNavigation")
                        .HasForeignKey("ReviewedBy")
                        .HasConstraintName("FK_Document_ReviewedByUser");

                    b.HasOne("BehaviorAgency.Data.Entities.UserInfo", "User")
                        .WithMany("DocumentUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Document_UserInfo");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.DocumentType", b =>
                {
                    b.HasOne("BehaviorAgency.Data.Entities.Agency", "Agency")
                        .WithMany("DocumentType")
                        .HasForeignKey("AgencyId")
                        .HasConstraintName("FK_DocumentType_Agency");

                    b.HasOne("BehaviorAgency.Data.Entities.DocumentCategory", "DocCategory")
                        .WithMany("DocumentType")
                        .HasForeignKey("DocCategoryId")
                        .HasConstraintName("FK_DocumentType_DocumentCategory");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.UserInfo", b =>
                {
                    b.HasOne("BehaviorAgency.Data.Entities.Address", "Address")
                        .WithMany("UserInfo")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_UserInfo_Address");
                });

            modelBuilder.Entity("BehaviorAgency.Data.Entities.UserSettings", b =>
                {
                    b.HasOne("BehaviorAgency.Data.Entities.UserInfo", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("BehaviorAgency.Data.Entities.UserSettings", "UserId")
                        .HasConstraintName("FK_UserNotifications_UserInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
